{"ast":null,"code":"import _classCallCheck from \"/mnt/data/repositories/github/self-study/React/learning/Redux-Counter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/data/repositories/github/self-study/React/learning/Redux-Counter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/mnt/data/repositories/github/self-study/React/learning/Redux-Counter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/mnt/data/repositories/github/self-study/React/learning/Redux-Counter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/mnt/data/repositories/github/self-study/React/learning/Redux-Counter/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/mnt/data/repositories/github/self-study/React/learning/Redux-Counter/src/containers/Counter/Counter.js\";\nimport React, { Component } from 'react';\nimport CounterControl from '../../components/CounterControl/CounterControl';\nimport CounterOutput from '../../components/CounterOutput/CounterOutput';\nimport * as actionTypes from '../../store/actions'; // Redux\n\nimport { connect } from 'react-redux';\n\nvar Counter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Counter, _Component);\n\n  function Counter() {\n    _classCallCheck(this, Counter);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Counter).apply(this, arguments));\n  }\n\n  _createClass(Counter, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var results = this.props.storedResults.map(function (item, key) {\n        return React.createElement(\"li\", {\n          key: key,\n          style: {\n            cursor: 'pointer'\n          },\n          onClick: function onClick() {\n            return _this.props.onDeleteResults(key);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16\n          },\n          __self: this\n        }, item);\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(CounterOutput, {\n        value: this.props.compCounter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }), React.createElement(CounterControl, {\n        label: \"Increment\",\n        clicked: this.props.onIncrementCounter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }), React.createElement(CounterControl, {\n        label: \"Decrement\",\n        clicked: this.props.onDecrementCounter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }), React.createElement(CounterControl, {\n        label: \"Add 5\",\n        clicked: this.props.onAddCounter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }), React.createElement(CounterControl, {\n        label: \"Subtract 5\",\n        clicked: this.props.onSubstractCounter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this.props.onStoreResults(_this.props.compCounter);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"Store Result\"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, results));\n    }\n  }]);\n\n  return Counter;\n}(Component); // map to store instructions about how the state managed by redux should be mapped to props you\n// can see the container. The state is the state we set up previously in the reducer.\n// It expects the state input and returns a JS object which is a map of prop names and slices of the \n// state stored. It's our way of configuring which kind of information we need.\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    compCounter: state.ctr.counterRedux,\n    storedResults: state.res.results\n  };\n}; // Which kind of actions do I want to dispatch in thise container.\n//  It returns prop names referencing to a function which should eventually get executed to a dispatch\n// an action.\n\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onIncrementCounter: function onIncrementCounter() {\n      return dispatch({\n        type: actionTypes.INCREMENT,\n        payLoad: {\n          value: 1\n        }\n      });\n    },\n    onAddCounter: function onAddCounter() {\n      return dispatch({\n        type: actionTypes.ADD,\n        payLoad: {\n          value: 5\n        }\n      });\n    },\n    onDecrementCounter: function onDecrementCounter() {\n      return dispatch({\n        type: actionTypes.DECREMENT,\n        payLoad: {\n          value: -1\n        }\n      });\n    },\n    onSubstractCounter: function onSubstractCounter() {\n      return dispatch({\n        type: actionTypes.SUBSTRACT,\n        payLoad: {\n          value: -5\n        }\n      });\n    },\n    onStoreResults: function onStoreResults(currentCounter) {\n      return dispatch({\n        type: actionTypes.STORE_RESULT,\n        payLoad: {\n          currentCounter: currentCounter\n        }\n      });\n    },\n    onDeleteResults: function onDeleteResults(id) {\n      return dispatch({\n        type: actionTypes.DELETE_RESULT,\n        payLoad: {\n          index: id\n        }\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);","map":{"version":3,"sources":["/mnt/data/repositories/github/self-study/React/learning/Redux-Counter/src/containers/Counter/Counter.js"],"names":["React","Component","CounterControl","CounterOutput","actionTypes","connect","Counter","results","props","storedResults","map","item","key","cursor","onDeleteResults","compCounter","onIncrementCounter","onDecrementCounter","onAddCounter","onSubstractCounter","onStoreResults","mapStateToProps","state","ctr","counterRedux","res","mapDispatchToProps","dispatch","type","INCREMENT","payLoad","value","ADD","DECREMENT","SUBSTRACT","currentCounter","STORE_RESULT","id","DELETE_RESULT","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport CounterControl from '../../components/CounterControl/CounterControl';\nimport CounterOutput from '../../components/CounterOutput/CounterOutput';\nimport * as actionTypes  from '../../store/actions';\n\n// Redux\nimport { connect} from 'react-redux';\n\nclass Counter extends Component {\n   \n\n\n    render () {\n        const results = (\n            this.props.storedResults.map( (item,key) => {\n                return (<li key={key} style={{\n                    cursor: 'pointer',\n                    \n                }} onClick={ () => this.props.onDeleteResults(key)}>{item}</li>)\n            })                        \n        );\n\n        return (\n            <div>\n                <CounterOutput value={this.props.compCounter} />\n                <CounterControl label=\"Increment\" clicked={ this.props.onIncrementCounter} />\n                <CounterControl label=\"Decrement\" clicked={this.props.onDecrementCounter}  />\n                <CounterControl label=\"Add 5\" clicked={ this.props.onAddCounter}  />\n                <CounterControl label=\"Subtract 5\" clicked={this.props.onSubstractCounter}  />\n                <hr />\n                <button onClick={ () => this.props.onStoreResults(this.props.compCounter)}>Store Result</button>\n                <ul>\n                    {results}\n                </ul>\n            </div>\n        );\n    }\n}\n\n// map to store instructions about how the state managed by redux should be mapped to props you\n// can see the container. The state is the state we set up previously in the reducer.\n\n// It expects the state input and returns a JS object which is a map of prop names and slices of the \n// state stored. It's our way of configuring which kind of information we need.\nconst mapStateToProps =  (state) => {\n    return {\n        compCounter: state.ctr.counterRedux ,\n        storedResults: state.res.results\n    };\n}\n\n// Which kind of actions do I want to dispatch in thise container.\n//  It returns prop names referencing to a function which should eventually get executed to a dispatch\n// an action.\nconst mapDispatchToProps =  ( dispatch) => {\n    return {\n        onIncrementCounter: () => dispatch({ type: actionTypes.INCREMENT , payLoad: {\n            value : 1\n        }}) ,\n        onAddCounter: () => dispatch({ type: actionTypes.ADD , payLoad: {\n            value : 5\n        }}) ,\n        onDecrementCounter: () => dispatch({ type: actionTypes.DECREMENT , payLoad: {\n            value : -1\n        }}),\n        onSubstractCounter: () => dispatch({ type: actionTypes.SUBSTRACT , payLoad: {\n            value : -5\n        }}) ,\n        onStoreResults: ( currentCounter) => dispatch ({\n            type: actionTypes.STORE_RESULT ,\n            payLoad: {\n                currentCounter: currentCounter\n            }\n        }) ,\n        onDeleteResults: ( id ) => dispatch ({\n            type: actionTypes.DELETE_RESULT ,\n            payLoad: {\n                index : id\n            }\n        }) \n    }\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)"]},"metadata":{},"sourceType":"module"}