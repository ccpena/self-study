{"ast":null,"code":"import _classCallCheck from \"/mnt/data/repositories/github/self-study/React/learning/Redux-Counter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/data/repositories/github/self-study/React/learning/Redux-Counter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/mnt/data/repositories/github/self-study/React/learning/Redux-Counter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/mnt/data/repositories/github/self-study/React/learning/Redux-Counter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/mnt/data/repositories/github/self-study/React/learning/Redux-Counter/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/mnt/data/repositories/github/self-study/React/learning/Redux-Counter/src/containers/Counter/Counter.js\";\nimport React, { Component } from 'react';\nimport CounterControl from '../../components/CounterControl/CounterControl';\nimport CounterOutput from '../../components/CounterOutput/CounterOutput'; // Redux\n\nimport { connect } from 'react-redux';\n\nvar Counter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Counter, _Component);\n\n  function Counter() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Counter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Counter)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      counter: 0\n    };\n\n    _this.counterChangedHandler = function (action, value) {\n      switch (action) {\n        case 'inc':\n          _this.setState(function (prevState) {\n            return {\n              counter: prevState.counter + 1\n            };\n          });\n\n          break;\n\n        case 'dec':\n          _this.setState(function (prevState) {\n            return {\n              counter: prevState.counter - 1\n            };\n          });\n\n          break;\n\n        case 'add':\n          _this.setState(function (prevState) {\n            return {\n              counter: prevState.counter + value\n            };\n          });\n\n          break;\n\n        case 'sub':\n          _this.setState(function (prevState) {\n            return {\n              counter: prevState.counter - value\n            };\n          });\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Counter, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(CounterOutput, {\n        value: this.props.compCounter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }), React.createElement(CounterControl, {\n        label: \"Increment\",\n        clicked: this.props.onIncrementCounter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), React.createElement(CounterControl, {\n        label: \"Decrement\",\n        clicked: this.props.onDecrementCounter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), React.createElement(CounterControl, {\n        label: \"Add 5\",\n        clicked: this.props.onAddCounter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }), React.createElement(CounterControl, {\n        label: \"Subtract 5\",\n        clicked: this.props.onSubstractCounter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Counter;\n}(Component); // map to store instructions about how the state managed by redux should be mapped to props you\n// can see the container. The state is the state we set up previously in the reducer.\n// It expects the state input and returns a JS object which is a map of prop names and slices of the \n// state stored. It's our way of configuring which kind of information we need.\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    compCounter: state.counterRedux\n  };\n}; // Which kind of actions do I want to dispatch in thise container.\n//  It returns prop names referencing to a function which should eventually get executed to a dispatch\n// an action.\n\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onIncrementCounter: function onIncrementCounter() {\n      return dispatch({\n        type: 'INCREMENT',\n        payLoad: {\n          value: 1\n        }\n      });\n    },\n    onAddCounter: function onAddCounter() {\n      return dispatch({\n        type: 'ADD',\n        payLoad: {\n          value: 5\n        }\n      });\n    },\n    onDecrementCounter: function onDecrementCounter() {\n      return dispatch({\n        type: 'DECREMENT',\n        payLoad: {\n          value: -1\n        }\n      });\n    },\n    onSubstractCounter: function onSubstractCounter() {\n      return dispatch({\n        type: 'SUBSTRACT',\n        payLoad: {\n          value: -5\n        }\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);","map":{"version":3,"sources":["/mnt/data/repositories/github/self-study/React/learning/Redux-Counter/src/containers/Counter/Counter.js"],"names":["React","Component","CounterControl","CounterOutput","connect","Counter","state","counter","counterChangedHandler","action","value","setState","prevState","props","compCounter","onIncrementCounter","onDecrementCounter","onAddCounter","onSubstractCounter","mapStateToProps","counterRedux","mapDispatchToProps","dispatch","type","payLoad"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport CounterControl from '../../components/CounterControl/CounterControl';\nimport CounterOutput from '../../components/CounterOutput/CounterOutput';\n\n\n// Redux\nimport { connect} from 'react-redux';\n\nclass Counter extends Component {\n    state = {\n        counter: 0\n    }\n\n    counterChangedHandler = ( action, value ) => {\n        switch ( action ) {\n            case 'inc':\n                this.setState( ( prevState ) => { return { counter: prevState.counter + 1 } } )\n                break;\n            case 'dec':\n                this.setState( ( prevState ) => { return { counter: prevState.counter - 1 } } )\n                break;\n            case 'add':\n                this.setState( ( prevState ) => { return { counter: prevState.counter + value } } )\n                break;\n            case 'sub':\n                this.setState( ( prevState ) => { return { counter: prevState.counter - value } } )\n                break;\n                default:\n                break;\n        }\n    }\n\n    render () {\n        return (\n            <div>\n                <CounterOutput value={this.props.compCounter} />\n                <CounterControl label=\"Increment\" clicked={ this.props.onIncrementCounter} />\n                <CounterControl label=\"Decrement\" clicked={this.props.onDecrementCounter}  />\n                <CounterControl label=\"Add 5\" clicked={ this.props.onAddCounter}  />\n                <CounterControl label=\"Subtract 5\" clicked={ this.props.onSubstractCounter}  />\n            </div>\n        );\n    }\n}\n\n// map to store instructions about how the state managed by redux should be mapped to props you\n// can see the container. The state is the state we set up previously in the reducer.\n\n// It expects the state input and returns a JS object which is a map of prop names and slices of the \n// state stored. It's our way of configuring which kind of information we need.\nconst mapStateToProps =  (state) => {\n    return {\n        compCounter: state.counterRedux\n    };\n}\n\n// Which kind of actions do I want to dispatch in thise container.\n//  It returns prop names referencing to a function which should eventually get executed to a dispatch\n// an action.\nconst mapDispatchToProps =  ( dispatch) => {\n    return {\n        onIncrementCounter: () => dispatch({ type: 'INCREMENT' , payLoad: {\n            value : 1\n        }}) ,\n        onAddCounter: () => dispatch({ type: 'ADD' , payLoad: {\n            value : 5\n        }}) ,\n        onDecrementCounter: () => dispatch({ type: 'DECREMENT' , payLoad: {\n            value : -1\n        }}),\n        onSubstractCounter: () => dispatch({ type: 'SUBSTRACT' , payLoad: {\n            value : -5\n        }})\n    }\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)"]},"metadata":{},"sourceType":"module"}